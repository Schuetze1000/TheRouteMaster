{
  "openapi": "3.0.3",
  "info": {
    "title": "API Documentation TheRouteMaster",
    "contact": {
      "email": "service@schuetz-andreas.dev"
    },
    "license": {
      "name": "GPL-3.0",
      "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
    },
    "version": "1.0.2"
  },
  "externalDocs": {
    "description": "Github Repository",
    "url": "https://github.com/Schuetze1000/TheRouteMaster"
  },
  "servers": [
    {
      "url": "https://the-routemaster.schuetz-andreas.dev/api"
    }
  ],
  "tags": [
    {
      "name": "user",
      "description": "Main User calls",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://github.com/Schuetze1000/TheRouteMaster/blob/main/server/controllers/user.ts"
      }
    },
    {
      "name": "ics",
      "description": "API for the integration of the course calendar",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://github.com/Schuetze1000/TheRouteMaster/blob/main/server/controllers/ics.ts"
      }
    },
    {
      "name": "auth",
      "description": "All operations for authentication",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://github.com/Schuetze1000/TheRouteMaster/blob/main/server/controllers/auth.ts"
      }
    }
  ],
  "paths": {
    "/user/updateprofile": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update User-Profile",
        "description": "This can only be done by the logged in user.",
        "operationId": "User_UpdateProfile",
        "requestBody": {
          "description": "Updated user profile",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Token / Error occurred"
          },
          "401": {
            "description": "Invalid Credentials"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/updateconfigtrain": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update User-Train config",
        "description": "This can only be done by the logged in user.",
        "operationId": "User_UpdateConfigTrain",
        "requestBody": {
          "description": "Updated user-configTrain",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserConfigTrain"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Token / Error occurred"
          },
          "401": {
            "description": "Invalid Credentials"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/updatepassword": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update User-Password",
        "description": "This can only be done by the logged in user.",
        "operationId": "User_UpdatePassword",
        "requestBody": {
          "description": "Updated user Password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserChangePassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Token / Error occurred"
          },
          "401": {
            "description": "Invalid Credentials"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/getuser": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get User-Information",
        "description": "This can only be done by the logged in user.",
        "operationId": "User_GetInf",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Token / Error occurred"
          },
          "401": {
            "description": "Invalid Credentials"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/deactivateaccount": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Deactivate User-Account",
        "description": "This can only be done by the logged in user.",
        "operationId": "User_Deactivate",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Token / Error occurred"
          },
          "401": {
            "description": "Invalid Credentials"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/deleteaccount": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete User-Account",
        "operationId": "User_Delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Token / Error occurred"
          },
          "401": {
            "description": "Invalid Credentials"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ics/getics": {
      "get": {
        "tags": [
          "ics"
        ],
        "summary": "Get ICS-File and Hash-Value",
        "operationId": "ICS_getICS",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ICS"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Token / Error occurred"
          },
          "401": {
            "description": "Invalid Credentials"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ics/gethash": {
      "get": {
        "tags": [
          "ics"
        ],
        "summary": "Get Hash-Value of ICS-File",
        "operationId": "ICS_getHash",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ICS_Hash"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Token"
          },
          "401": {
            "description": "Invalid Credentials"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ics/getavailableics": {
      "get": {
        "tags": [
          "ics"
        ],
        "summary": "Get ICS-File and Hash-Value",
        "operationId": "ICS_getAvailableICS",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AICS"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Token / Error occurred"
          },
          "401": {
            "description": "Invalid Credentials"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/navigation/getrouteshash": {
      "get": {
        "tags": [
          "navigation"
        ],
        "summary": "Get Hash-Value of all specified Routes",
        "operationId": "Navigation_getRoutesHash",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutesHash"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Token / Users configTrain.active = false!"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/navigation/getroute": {
      "get": {
        "tags": [
          "navigation"
        ],
        "summary": "Get specific Routes by routeId",
        "operationId": "Navigation_getRoute",
        "parameters": [
          {
            "in": "query",
            "name": "routeId",
            "schema": {
              "type": "string"
            },
            "description": "The unique RouteId of the route"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Token / Please provide a valid RouteId! / Users configTrain.active = false!"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/navigation/getroutes": {
      "get": {
        "tags": [
          "navigation"
        ],
        "summary": "Get all Routes specified from the User",
        "operationId": "Navigation_getRoutes",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Routes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Token / Users configTrain.active = false!"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/navigation/getneabystations": {
      "get": {
        "tags": [
          "navigation"
        ],
        "summary": "Get all neaby Stations from longitude and latitude",
        "operationId": "Navigation_getNeabyStations",
        "parameters": [
          {
            "in": "query",
            "name": "latitude",
            "schema": {
              "type": "number"
            },
            "description": "Latitude of the location"
          },
          {
            "in": "query",
            "name": "longitude",
            "schema": {
              "type": "number"
            },
            "description": "Longitude of the location"
          },
          {
            "in": "query",
            "name": "distance",
            "schema": {
              "type": "number",
              "minimum": 300,
              "maximum": 2000
            },
            "description": "Distance to search. Min: 300 | Max: 2000"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stations"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Token / Please provide a valid Query!"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Create User-Profile",
        "operationId": "Auth_CreateProfile",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Auth_Profile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Auth_Tokens"
                }
              }
            }
          },
          "400": {
            "description": "Error occurred"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "Auth_LoginUser",
        "requestBody": {
          "description": "User login",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Auth_Login"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Auth_Tokens"
                }
              }
            }
          },
          "400": {
            "description": "Invalid email/password supplied"
          }
        }
      }
    },
    "/auth/forgotpassword": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "Auth_ForgotPassword",
        "requestBody": {
          "description": "User login",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Auth_ForgotPassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid email supplied"
          }
        }
      }
    },
    "/auth/resetpassword/{resetToken}": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "Auth_ResetPassword",
        "parameters": [
          {
            "name": "resetToken",
            "in": "path",
            "description": "The restentoken get from email by /auth/forgotpassword",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User login",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Auth_ResetPassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Error occurred"
          }
        }
      }
    },
    "/auth/refreshtoken": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Authentication must include the refresh token",
        "description": "",
        "operationId": "Auth_RefreshToken",
        "requestBody": {
          "description": "Authentication Token + Refresh Token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Auth_Token"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Auth_Tokens"
                }
              }
            }
          },
          "400": {
            "description": "Invalid refresh-token!"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserProfile": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string",
            "example": "John"
          },
          "surname": {
            "type": "string",
            "example": "James"
          },
          "avatar": {
            "type": "string"
          },
          "homeaddress": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "example": "7-9"
              },
              "street": {
                "type": "string",
                "example": "Coblitzallee"
              },
              "zip": {
                "type": "string",
                "example": 68163
              },
              "city": {
                "type": "string",
                "example": "Mannheim"
              },
              "state": {
                "type": "string",
                "example": "Baden-Württemberg"
              },
              "country": {
                "type": "string",
                "example": "Germany"
              }
            }
          }
        }
      },
      "UserConfigTrain": {
        "type": "object",
        "properties": {
          "maxRoutes": {
            "type": "number",
            "example": 3
          },
          "timeOffset": {
            "type": "number",
            "example": 0
          },
          "homeTrainStationID": {
            "type": "number",
            "example": 8000105
          },
          "workTrainStationID": {
            "type": "number",
            "example": 508709
          },
          "active": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "firstname": {
            "type": "string",
            "example": "John"
          },
          "surname": {
            "type": "string",
            "example": "James"
          },
          "avatar": {
            "type": "string"
          },
          "homeaddress": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "example": "7-9"
              },
              "street": {
                "type": "string",
                "example": "Coblitzallee"
              },
              "zip": {
                "type": "string",
                "example": 68163
              },
              "city": {
                "type": "string",
                "example": "Mannheim"
              },
              "state": {
                "type": "string",
                "example": "Baden-Württemberg"
              },
              "country": {
                "type": "string",
                "example": "Germany"
              }
            }
          }
        }
      },
      "UserChangePassword": {
        "type": "object",
        "properties": {
          "newpassword": {
            "type": "string",
            "example": "changeme2"
          },
          "oldpassword": {
            "type": "string",
            "example": "changeme"
          }
        }
      },
      "ICS": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "WIMBIT19 A"
          },
          "data": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          }
        }
      },
      "ICS_Hash": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          }
        }
      },
      "AICS": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "WIMBIT19 A"
          },
          "uid": {
            "type": "string",
            "example": "7738001"
          }
        }
      },
      "RoutesHash": {
        "type": "object",
        "properties": {
          "routeid": {
            "type": "string",
            "example": "6484f29ee03e0dbb29ddf380"
          },
          "hash": {
            "type": "string",
            "example": "a7c7638a5aebeafb5f220491e1dcc367c6625215"
          }
        }
      },
      "Route": {
        "type": "object",
        "properties": {
          "routeid": {
            "type": "string",
            "example": "6484f29ee03e0dbb29ddf380"
          },
          "fromID": {
            "type": "number",
            "example": 8000105
          },
          "from": {
            "type": "string",
            "example": "Frankfurt(Main)Hbf"
          },
          "fromLocation": {
            "type": "object",
            "properties": {
              "latitude": {
                "type": "number",
                "example": 50.106817
              },
              "longitude": {
                "type": "number",
                "example": 8.663003
              }
            }
          },
          "toID": {
            "type": "number",
            "example": 508709
          },
          "to": {
            "type": "string",
            "example": "Neuostheim Duale Hochschule, Mannheim"
          },
          "toLocation": {
            "type": "object",
            "properties": {
              "latitude": {
                "type": "number",
                "example": 49.475325
              },
              "longitude": {
                "type": "number",
                "example": 8.534269
              }
            }
          },
          "routes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "arrival": {
                  "type": "string",
                  "example": "2023-06-12T09:44:00+02:00"
                },
                "plannedArrival": {
                  "type": "string",
                  "example": "2023-06-12T09:44:00+02:00"
                },
                "arivalDelay": {
                  "type": "number",
                  "example": null
                },
                "route": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "index": {
                        "type": "number",
                        "example": 0
                      },
                      "walk": {
                        "type": "boolean",
                        "example": false
                      },
                      "types": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "EC 113"
                          },
                          "idNr": {
                            "type": "string",
                            "example": "ec-113"
                          },
                          "types": {
                            "type": "string",
                            "example": "train || national || EC"
                          },
                          "direction": {
                            "type": "string",
                            "example": "Klagenfurt Hbf"
                          },
                          "from": {
                            "type": "string",
                            "example": "Frankfurt(Main)Hbf"
                          },
                          "fromLocation": {
                            "type": "object",
                            "properties": {
                              "latitude": {
                                "type": "number",
                                "example": 50.106817
                              },
                              "longitude": {
                                "type": "number",
                                "example": 8.663003
                              }
                            }
                          },
                          "to": {
                            "type": "string",
                            "example": "Heidelberg Hbf"
                          },
                          "toLocation": {
                            "type": "object",
                            "properties": {
                              "latitude": {
                                "type": "number",
                                "example": 49.403582
                              },
                              "longitude": {
                                "type": "number",
                                "example": 8.67548
                              }
                            }
                          },
                          "departure": {
                            "type": "string",
                            "example": "2023-06-12T08:20:00+02:00"
                          },
                          "plannedDeparture": {
                            "type": "string",
                            "example": "2023-06-12T08:20:00+02:00"
                          },
                          "departureDelay": {
                            "type": "number",
                            "example": "null,"
                          },
                          "plannedArrival": {
                            "type": "string",
                            "example": "2023-06-12T09:11:00+02:00"
                          },
                          "arrival": {
                            "type": "string",
                            "example": "2023-06-12T09:11:00+02:00"
                          },
                          "arivalDelay": {
                            "type": "number",
                            "example": null
                          }
                        }
                      }
                    }
                  }
                },
                "price": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "number",
                      "example": 21.95
                    },
                    "currency": {
                      "type": "string",
                      "example": "EUR"
                    }
                  }
                }
              }
            }
          },
          "wasUpated": {
            "type": "boolean",
            "example": false
          },
          "hash": {
            "type": "string",
            "example": "a7c7638a5aebeafb5f220491e1dcc367c6625215"
          }
        }
      },
      "Routes": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Route"
        }
      },
      "Stations": {
        "type": "object",
        "properties": {
          "type_": {
            "type": "string",
            "example": "stop"
          },
          "id": {
            "type": "string",
            "example": "900000120001"
          },
          "name": {
            "type": "string",
            "example": "S+U Frankfurter Allee"
          },
          "location": {
            "type": "object",
            "properties": {
              "type_": {
                "type": "string",
                "example": "location"
              },
              "latitude": {
                "type": "number",
                "example": 52.513616
              },
              "longitude": {
                "type": "number",
                "example": 13.475298
              }
            }
          },
          "products": {
            "type": "object",
            "properties": {
              "suburban": {
                "type": "boolean",
                "example": true
              },
              "subway": {
                "type": "boolean",
                "example": true
              },
              "tram": {
                "type": "boolean",
                "example": true
              },
              "bus": {
                "type": "boolean",
                "example": true
              },
              "ferry": {
                "type": "boolean",
                "example": false
              },
              "express": {
                "type": "boolean",
                "example": false
              },
              "regional": {
                "type": "boolean",
                "example": false
              }
            }
          },
          "distance": {
            "type": "number",
            "example": 56
          }
        }
      },
      "Auth_Profile": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "changeme"
          }
        }
      },
      "Auth_Login": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "changeme"
          }
        }
      },
      "Auth_ForgotPassword": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@email.com"
          }
        }
      },
      "Auth_ResetPassword": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "example": "changeme"
          }
        }
      },
      "Auth_Token": {
        "type": "object",
        "properties": {
          "jwt_token": {
            "type": "string"
          }
        }
      },
      "Auth_Tokens": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "BasicResponseBody": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "string",
            "example": "Specific description"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}